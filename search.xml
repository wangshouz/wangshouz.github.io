<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>leetcode 解题</title>
      <link href="/2018/06/25/leetcode/"/>
      <url>/2018/06/25/leetcode/</url>
      <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problemset/all/" target="_blank" rel="noopener">leetcode网址</a></p><a id="more"></a><h3 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h3><p><a href="https://leetcode-cn.com/problems/roman-to-integer/description/" target="_blank" rel="noopener">Description</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"I"</span>, <span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">"V"</span>, <span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">"X"</span>, <span class="number">10</span>);</span><br><span class="line">    map.put(<span class="string">"L"</span>, <span class="number">50</span>);</span><br><span class="line">    map.put(<span class="string">"C"</span>, <span class="number">100</span>);</span><br><span class="line">    map.put(<span class="string">"D"</span>, <span class="number">500</span>);</span><br><span class="line">    map.put(<span class="string">"M"</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s.length() == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> map.get(String.valueOf(s.charAt(<span class="number">0</span>)));</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = map.get(String.valueOf(s.charAt(<span class="number">0</span>)));</span><br><span class="line">    <span class="keyword">int</span> next = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        next = map.get(String.valueOf(s.charAt(i + <span class="number">1</span>)));</span><br><span class="line">        pre = map.get(String.valueOf(s.charAt(i)));</span><br><span class="line">        <span class="keyword">if</span> (next &gt; pre) &#123;</span><br><span class="line">            temp = next - temp;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next == pre) &#123;</span><br><span class="line">            temp = next + temp;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum = sum + temp;</span><br><span class="line">            temp = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum + temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h3><p><a href="https://leetcode-cn.com/problems/valid-parentheses/description/" target="_blank" rel="noopener">Description</a></p><p><img src="https://github.com/wangshouz/wangshouz.github.io/blob/master/images/parentheses.png" alt="栈"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">""</span>)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (s.isEmpty() || s.length() % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : chars) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'&#123;'</span> || c == <span class="string">'['</span> || c == <span class="string">'('</span>) &#123;</span><br><span class="line">            stack.push(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'&#125;'</span> &amp;&amp; !stack.pop().equals(<span class="string">'&#123;'</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">']'</span> &amp;&amp; !stack.pop().equals(<span class="string">'['</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">')'</span> &amp;&amp; !stack.pop().equals(<span class="string">'('</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h3><p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/description/" target="_blank" rel="noopener">Description</a></p><p>递归处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) <span class="keyword">return</span> l2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1;</span><br><span class="line"></span><br><span class="line">    ListNode listNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">        listNode = l1;</span><br><span class="line">        listNode.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        listNode = l2;</span><br><span class="line">        listNode.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> listNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android文件系统路径整理</title>
      <link href="/2018/06/14/android-files/"/>
      <url>/2018/06/14/android-files/</url>
      <content type="html"><![CDATA[<h3 id="context获取路径"><a href="#context获取路径" class="headerlink" title="context获取路径"></a>context获取路径</h3><p><img src="https://upload-images.jianshu.io/upload_images/1653729-d2bc01bd39240bad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/960" alt="image.png"></p><a id="more"></a><h4 id="context-getFilesDir"><a href="#context-getFilesDir" class="headerlink" title="context.getFilesDir()"></a>context.getFilesDir()</h4><p>获取路径：/data/user/0/应用包名/files<br><br>包含应用程序文件的目录的路径。不需要额外的权限来读取或在返回的路径下写入文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * No additional permissions are required for the calling app to read or</span><br><span class="line"> * write files under the returned path.</span><br><span class="line"> *</span><br><span class="line"> * @return The path of the directory holding application files.</span><br><span class="line"> */</span><br><span class="line">public abstract File getFilesDir();</span><br></pre></td></tr></table></figure></p><h4 id="context-getCacheDir"><a href="#context-getCacheDir" class="headerlink" title="context.getCacheDir()"></a>context.getCacheDir()</h4><p>获取路径：/data/user/0/应用包名/cache<br><br>应用程序缓存文件的目录的路径。强烈鼓励应用程序将缓存空间的使用保持在满额。当该文件夹超额时，系统将自动删除该目录中的文件<br>为其他地方提供需要空间，当不满额时则不会。不需要额外的权限来读取或在返回的路径下写入文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The system will automatically delete files in this directory as disk</span><br><span class="line"> * space is needed elsewhere on the device. The system will always delete</span><br><span class="line"> * older files first, as reported by &#123;@link File#lastModified()&#125;. </span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Apps are strongly encouraged to keep their usage of cache space below the</span><br><span class="line"> * quota returned by</span><br><span class="line"> * &#123;@link StorageManager#getCacheQuotaBytes(java.util.UUID)&#125;. If your app</span><br><span class="line"> * goes above this quota, your cached files will be some of the first to be</span><br><span class="line"> * deleted when additional disk space is needed. Conversely, if your app</span><br><span class="line"> * stays under this quota, your cached files will be some of the last to be</span><br><span class="line"> * deleted when additional disk space is needed.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Apps require no extra permissions to read or write to the returned path,</span><br><span class="line"> * since this path lives in their private storage.</span><br><span class="line"> *</span><br><span class="line"> * @return The path of the directory holding application cache files.</span><br><span class="line"> */</span><br><span class="line">public abstract File getCacheDir();</span><br></pre></td></tr></table></figure></p><h4 id="context-getExternalCacheDir"><a href="#context-getExternalCacheDir" class="headerlink" title="context.getExternalCacheDir()"></a>context.getExternalCacheDir()</h4><p>获取路径：/storage/emulated/0/Android/data/应用包名/cache<br><br>应用程序特定目录的绝对路径，与 <strong><em>mContext.getCacheDir()</em></strong> 相似，区别在于平台并不总是监视共享存储中可用的空间，<br>因此可能不会自动删除这些文件。这些文件是应用程序内部的，通常不作为媒体文件对用户展示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * These files are internal to the application, and not typically visible </span><br><span class="line"> * to the user as media.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * This is like &#123;@link #getCacheDir()&#125; in that these files will be deleted</span><br><span class="line"> * when the application is uninstalled, however there are some important</span><br><span class="line"> * differences:</span><br><span class="line"> * &lt;li&gt;The platform does not always monitor the space available in shared</span><br><span class="line"> * storage, and thus may not automatically delete these files. Apps should</span><br><span class="line"> * always manage the maximum space used in this location. </span><br><span class="line"> *</span><br><span class="line"> * @return the absolute path to application-specific directory. May return</span><br><span class="line"> *         &#123;@code null&#125; if shared storage is not currently available.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p><h4 id="context-getExternalFilesDir-String-type"><a href="#context-getExternalFilesDir-String-type" class="headerlink" title="context.getExternalFilesDir(String type)"></a>context.getExternalFilesDir(String type)</h4><p>获取路径：/storage/emulated/0/Android/data/应用包名/files/type指定目录（详见下面Environment分析）<br><br>应用程序特定目录的绝对路径，与 <strong><em>mContext.getFilesDir()</em></strong> 相似。这些文件是应用程序内部的，通常不作为媒体文件对用户展示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param type The type of files directory to return. May be &#123;@code null&#125;</span><br><span class="line"> *            for the root of the files directory or one of the following</span><br><span class="line"> *            constants for a subdirectory:</span><br><span class="line"> *            &#123;@link android.os.Environment#DIRECTORY_MUSIC&#125;,</span><br><span class="line"> *            &#123;@link android.os.Environment#DIRECTORY_PODCASTS&#125;,</span><br><span class="line"> *            &#123;@link android.os.Environment#DIRECTORY_RINGTONES&#125;,</span><br><span class="line"> *            &#123;@link android.os.Environment#DIRECTORY_ALARMS&#125;,</span><br><span class="line"> *            &#123;@link android.os.Environment#DIRECTORY_NOTIFICATIONS&#125;,</span><br><span class="line"> *            &#123;@link android.os.Environment#DIRECTORY_PICTURES&#125;, or</span><br><span class="line"> *            &#123;@link android.os.Environment#DIRECTORY_MOVIES&#125;.</span><br><span class="line"> * @return the absolute path to application-specific directory. May return</span><br><span class="line"> *         &#123;@code null&#125; if shared storage is not currently available.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p><h4 id="context-getObbDir"><a href="#context-getObbDir" class="headerlink" title="context.getObbDir()"></a>context.getObbDir()</h4><p>获取路径：/storage/emulated/0/Android/obb/应用包名 <br><br>返回到应用程序特定目录的绝对路径。可能返回NULL。不需要额外权限。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Note if the application does not have any OBB files, this directory may not exist.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * This is like &#123;@link #getFilesDir()&#125; in that these files will be deleted</span><br><span class="line"> * when the application is uninstalled.</span><br><span class="line"> *</span><br><span class="line"> * On devices with multiple users (as described by &#123;@link UserManager&#125;),</span><br><span class="line"> * multiple users may share the same OBB storage location. Applications</span><br><span class="line"> * should ensure that multiple instances running under different users don&apos;t</span><br><span class="line"> * interfere with each other.</span><br><span class="line"> *</span><br><span class="line"> * @return the absolute path to application-specific directory. May return</span><br><span class="line"> *         &#123;@code null&#125; if shared storage is not currently available.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p><h4 id="context-getNoBackupFilesDir"><a href="#context-getNoBackupFilesDir" class="headerlink" title="context.getNoBackupFilesDir()"></a>context.getNoBackupFilesDir()</h4><p>获取路径：/data/user/0/应用包名/no_backup<br><br>不会自动备份到远程存储的应用程序文件的路径。需要判断<strong>Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP（21）</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Returns the absolute path to the directory on the filesystem similar to</span><br><span class="line"> * &#123;@link #getFilesDir()&#125;. The difference is that files placed under this</span><br><span class="line"> * directory will be excluded from automatic backup to remote storage. See</span><br><span class="line"> * &#123;@link android.app.backup.BackupAgent BackupAgent&#125; for a full discussion</span><br><span class="line"> * of the automatic backup mechanism in Android.</span><br><span class="line"> *</span><br><span class="line"> * @return The path of the directory holding application files that will not</span><br><span class="line"> *         be automatically backed up to remote storage.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p><h4 id="context-getCodeCacheDir"><a href="#context-getCodeCacheDir" class="headerlink" title="context.getCodeCacheDir()"></a>context.getCodeCacheDir()</h4><p>获取路径:/data/user/0/应用包名/code_cache<br><br>保存应用程序代码缓存文件的目录路径。适合在运行时存放应用产生的编译或者优化的代码。不需要额外权限。<strong>需要判断Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP（21）</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The system will delete any files stored in this location both when your</span><br><span class="line"> * specific application is upgraded, and when the entire platform is</span><br><span class="line"> * upgraded.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * This location is optimal for storing compiled or optimized code generated</span><br><span class="line"> * by your application at runtime.</span><br><span class="line"> *</span><br><span class="line"> * @return The path of the directory holding application code cache files.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p><h4 id="context-getDataDir"><a href="#context-getDataDir" class="headerlink" title="context.getDataDir()"></a>context.getDataDir()</h4><p>获取路径：/data/user/0/应用包名<br><br>返回文件系统目录的绝对路径，所有属于该应用程序的私有文件都存储在文件系统中。应用程序不应该直接使用这个路径，<br>而是应该在这个类上使用{getFilesDir()}、{getCacheDir()}、{getDir(String, int)}或其他存储API。<br>需要判断<strong>Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N（24）</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Returns the absolute path to the directory on the filesystem where all</span><br><span class="line"> * private files belonging to this app are stored. Apps should not use this</span><br><span class="line"> * path directly; they should instead use &#123;@link #getFilesDir()&#125;,</span><br><span class="line"> * &#123;@link #getCacheDir()&#125;, &#123;@link #getDir(String, int)&#125;, or other storage</span><br><span class="line"> * APIs on this class.</span><br><span class="line"> *</span><br><span class="line"> * No additional permissions are required for the calling app to read or</span><br><span class="line"> * write files under the returned path.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p><h4 id="context-getPackageCodePath"><a href="#context-getPackageCodePath" class="headerlink" title="context.getPackageCodePath()"></a>context.getPackageCodePath()</h4><p>获取路径：/data/app/应用包名-xxxxx/base.apk <br><br>此上下文的主Android包的完整路径。这对应用程序通常没有用处，因为它们不应该直接访问文件系统。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Return the full path to this context&apos;s primary Android package.</span><br><span class="line"> * The Android package is a ZIP file which contains application&apos;s</span><br><span class="line"> * primary code and assets.</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;Note: this is not generally useful for applications, since they should</span><br><span class="line"> * not be directly accessing the file system.</span><br><span class="line"> *</span><br><span class="line"> * @return String Path to the code and assets.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p><h4 id="context-getPackageResourcePath"><a href="#context-getPackageResourcePath" class="headerlink" title="context.getPackageResourcePath()"></a>context.getPackageResourcePath()</h4><p>获取路径：/data/app/应用包名-xxxxx/base.apk <br><br>基本跟mContext.getPackageCodePath()相同。</p><h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><h4 id="存储状态"><a href="#存储状态" class="headerlink" title="存储状态"></a>存储状态</h4><table><thead><tr><th>存储状态</th><th>描述</th></tr></thead><tbody><tr><td>MEDIA_UNKNOWN</td><td>Unknown storage state, such as when a path isn’t backed by known storage media.</td></tr><tr><td>MEDIA_REMOVED</td><td>Storage state if the media is not present.</td></tr><tr><td>MEDIA_UNMOUNTED</td><td>Storage state if the media is present but not mounted.</td></tr><tr><td>MEDIA_CHECKING</td><td>Storage state if the media is present and being disk-checked.</td></tr><tr><td>MEDIA_NOFS</td><td>Storage state if the media is present but is blank or is using an unsupported filesystem.</td></tr><tr><td>MEDIA_MOUNTED</td><td>Storage state if the media is present and mounted at its mount point with read/write access.</td></tr><tr><td>MEDIA_MOUNTED_READ_ONLY</td><td>Storage state if the media is present and mounted at its mount point with read-only access.</td></tr><tr><td>MEDIA_SHARED</td><td>Storage state if the media is present not mounted, and shared via USB mass storage.</td></tr><tr><td>MEDIA_BAD_REMOVAL</td><td>Storage state if the media was removed before it was unmounted.</td></tr><tr><td>MEDIA_UNMOUNTABLE</td><td>Storage state if the media is present but cannot be mounted. Typically this happens if the file system on the media is corrupted.</td></tr><tr><td>MEDIA_EJECTING</td><td>Storage state if the media is in the process of being ejected.</td></tr></tbody></table><h4 id="标准存储目录"><a href="#标准存储目录" class="headerlink" title="标准存储目录"></a>标准存储目录</h4><table><thead><tr><th>标准存储目录</th><th>目录</th></tr></thead><tbody><tr><td>DIRECTORY_MUSIC</td><td>Music 目录中的任何音频文件应该放在常规的音乐列表中供用户使用。</td></tr><tr><td>DIRECTORY_PODCASTS</td><td>Podcasts 可放置任何音频文件，应该在用户可以选择的播客列表中（而不是常规音乐）。</td></tr><tr><td>DIRECTORY_RINGTONES</td><td>Ringtones 可放置任何音频文件，应该在用户可以选择的铃声列表中（而不是常规音乐）。</td></tr><tr><td>DIRECTORY_ALARMS</td><td>Alarms 可放置任何音频文件，应该在用户可以选择的闹铃列表中（而不是常规音乐）。</td></tr><tr><td>DIRECTORY_NOTIFICATIONS</td><td>Notifications 可放置任何音频文件，应该在用户可以选择的通知提醒列表中（而不是常规音乐）。</td></tr><tr><td>DIRECTORY_PICTURES</td><td>Pictures 其中放置可供用户使用的图片文件。</td></tr><tr><td>DIRECTORY_MOVIES</td><td>Movies 其中放置可供用户使用的视频文件。</td></tr><tr><td>DIRECTORY_DOWNLOADS</td><td>Download 其中放置用户的下载文件</td></tr><tr><td>DIRECTORY_DCIM</td><td>DCIM 传统的安装图片和视频的位置。</td></tr><tr><td>DIRECTORY_DOCUMENTS</td><td>Documents 其中放置由用户创建的文档。</td></tr></tbody></table><p><strong>context.getExternalFilesDir(String type)</strong> 会返回/storage/emulated/0/Android/data/应用包名/files/type指定目录</p><p><img src="https://upload-images.jianshu.io/upload_images/1653729-6eba6f29274fd813.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/960" alt="image.png"></p><p><strong>Environment.getExternalStoragePublicDirectory(String type)</strong> 会返回/storage/emulated/0/type指定目录</p><p><img src="https://upload-images.jianshu.io/upload_images/1653729-beff6bd50902df67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/960" alt="image.png"></p><h4 id="获取路径"><a href="#获取路径" class="headerlink" title="获取路径"></a>获取路径</h4><ul><li>Environment.getExternalStorageState() 获取存储状态</li><li>Environment.getDataDirectory()</li><li>Environment.getDownloadCacheDirectory()</li><li>Environment.getRootDirectory()</li><li>Environment.getExternalStorageDirectory()：<br>返回共享/外部存储主目录。如果用户已经挂载在他们的计算机上或者已经从设备上删除或者其他一些问题已经发生，这个目录现在可能是不可访问的。可以用<strong>Environment.getExternalStorageState()</strong> 确定其当前状态。<br>传统上，这是一个<strong>SD卡</strong>，但它也可以被实现为与被保护的内部存储区不同的设备中的<strong>内置存储器</strong>，并且可以作为计算机上的文件系统安装。<br>应用程序不应直接使用此顶级目录，以避免污染用户的根命名空间。可以通过<strong>Context.getExternalFilesDirs(String)</strong>、<strong>Context.getExternalCacheDirs()</strong> 等方法访问二级存储。任何应用程序私有的文件都应该放在<strong>Context.getExternalFilesDir</strong> 返回的目录中，应用程序被卸载时系统将负责删除。</li></ul>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>快速搭建个人博客:Hexo+NexT+GitHub Pages</title>
      <link href="/2018/06/12/hello-world/"/>
      <url>/2018/06/12/hello-world/</url>
      <content type="html"><![CDATA[<h2 id="本地环境配置"><a href="#本地环境配置" class="headerlink" title="本地环境配置"></a>本地环境配置</h2><ul><li>windows系统</li><li>git  <a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载gitforwindows</a>  <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">教程</a></li><li>node.js <a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网下载</a>  注意:在Windows上安装时务必选择全部组件，包括勾选Add to Path。</li></ul><a id="more"></a><h2 id="Github-Pages申请"><a href="#Github-Pages申请" class="headerlink" title="Github Pages申请"></a>Github Pages申请</h2><ol><li>申请<a href="">Github</a>账号；</li><li>Create a new repository：name为账户名.github.io</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/1653729-07d19c3fb510bbd6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/520" alt="Create a new repository"></p><p>然后就可以访问https://账户名.github.io/</p><h2 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h2><p><a href="https://blog.csdn.net/qq_35246620/article/details/69061355?locationNum=11&amp;fps=1" target="_blank" rel="noopener">SSH</a></p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo官方文档</a></p><p>之前node.js配置好了的前提下，很多指令也可以直接在cmd里面使用，但推荐使用git bash来完成，git bash可以使用一些Linux的指令，比如ls等，比cmd要方便。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener">建站</a></p><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>该命令可简写为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p><p>默认情况下，访问网址为： <a href="http://localhost:4000/。" target="_blank" rel="noopener">http://localhost:4000/。</a></p><p>More info: <a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">指令</a></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="安装-hexo-deployer-git-插件"><a href="#安装-hexo-deployer-git-插件" class="headerlink" title="安装 hexo-deployer-git 插件"></a>安装 hexo-deployer-git 插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>修改根目录下的_config.yml文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:wangshouz/wangshouz.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><h3 id="指令部署"><a href="#指令部署" class="headerlink" title="指令部署"></a>指令部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>等待执行完毕，即可以访问 用户名.github.io 来查看自己的博客主页</p><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">部署</a></p><h2 id="Themes–Next"><a href="#Themes–Next" class="headerlink" title="Themes–Next"></a>Themes–Next</h2><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">官方文档</a></p><p><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">基本配置</a></p><p>基本使用根据官方文档配置即可，注意_congif.yml文件会有两处，分别为“站点配置文件”和“主题配置文件”，不要配置错了。</p><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><ul><li>git相关的坑：因为本身对git的使用不是十分熟练，所以过程中出了问题多google、百度就对了；</li><li>用下载稳定版的方式下载next源码，需要把hexo-theme-next文件夹改命为next；</li><li>Next主题里的search的配置：<a href="http://theme-next.iissnan.com/third-party-services.html#local-search" target="_blank" rel="noopener">Local Search</a></li><li>源码：部署只会把编译之后的public文件夹里的内容部署到github.io项目里；想要上传源码需要新建项目单独上传。</li><li>next使用克隆最新版本的方式获取的时候在上传到自己的github项目的时候会报错，因为git用的不6，所以直接删掉了next里面的.git文件夹，把next当成本地文件重新add上传；</li><li>侧边栏社交链接图标：因为使用的是Font Awesome图标库，所以有些是找不到图标的，比如知乎，简书。。。</li></ul><h2 id="我的博客"><a href="#我的博客" class="headerlink" title="我的博客"></a>我的博客</h2><ul><li>效果 <a href="https://wangshouz.github.io" target="_blank" rel="noopener">https://wangshouz.github.io</a></li><li>源码 <a href="https://github.com/wangshouz/blog" target="_blank" rel="noopener">https://github.com/wangshouz/blog</a></li></ul>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
